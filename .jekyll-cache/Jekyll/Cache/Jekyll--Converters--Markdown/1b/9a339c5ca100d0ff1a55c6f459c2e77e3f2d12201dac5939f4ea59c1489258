I"oñ<p>Retrofit is a very useful when sending HTTP requests. Also, itâ€™s extremely simple to write. In this post, I will describe how to write a custom Retrofit client and how to extend it. If you havenâ€™t got familiar with Retrofit, I suggest that you can go to its <a href="http://square.github.io/retrofit/">website</a> to know some basics about it.</p>

<p>(In fact, I wanted to write this post 3 months ago, but I need to prepare and practice algorithm. :D Maybe I will share some interesting tips for those who want to practice algorithm.)</p>

<h2 id="why-retrofit">Why Retrofit?</h2>
<ul>
  <li>Easy to use</li>
  <li>Great extensibility</li>
  <li>No Android dependency</li>
  <li>Good testability</li>
  <li>It supports several types of calls</li>
  <li>It supports different types of converters</li>
</ul>

<p>When you are using Retrofit, you donâ€™t need to write a bunch of code boilerplates to send HTTP requests. The only thing we have to write is to declare the APIs in an interface. This interface allows us to extend and maintain APIs efficiently. For example, if you want to add a HTTP GET request into an API, just simply add a method into the interface with params and @GET annotations. Additionally, this provides good testability to tests. When it comes to writing Android unit tests, Android dependency is definitely an essential factor we need to consider. Without Android dependency, unit testing code can be easier to write. We donâ€™t have to mock Android classes or use 3rd party libs to mock them. Retrofit also support different types of converters and calls. So we can customize Retrofit with these classes. I will explain how to use them in this post.</p>

<h2 id="enhanced-funtions">Enhanced Funtions</h2>
<p>For most of senarios, we customize Retrofit to enhance features which original Retrofit doesnâ€™t provide. You can see the list below. It contains some enhanced functions, and I will use these features as example to explain how to customize those features with Retrofit.</p>

<ul>
  <li>Custom calls</li>
  <li>Custom call adapters</li>
  <li>Retry requests automatically</li>
  <li>Dealing with fire-and-forget cases in Retrofit</li>
  <li>Cancel requests by tags</li>
  <li>Managing requests</li>
</ul>

<h2 id="custom-calls-and-adapters">Custom calls and adapters</h2>
<p>In normal cases, we donâ€™t need to customize our own calls or call adapters to send requests. However, if you want to gain more controls of requests. Itâ€™s for the best to override them. In order to enhance the functions I mentioned, we override calls and call adapters.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RetrofitCall</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="nc">Call</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Call</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">call</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Executor</span> <span class="n">executor</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">logTag</span> <span class="o">=</span> <span class="nc">RetrofitCall</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">();</span>

    <span class="kd">public</span> <span class="nf">RetrofitCall</span><span class="o">(</span><span class="nc">Call</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">call</span><span class="o">,</span> <span class="nc">Executor</span> <span class="n">executor</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">call</span> <span class="o">=</span> <span class="n">call</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">executor</span> <span class="o">=</span> <span class="n">executor</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Response</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">execute</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">call</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">enqueue</span><span class="o">(</span><span class="kd">final</span> <span class="nc">Callback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">call</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="k">new</span> <span class="nc">Callback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onResponse</span><span class="o">(</span><span class="kd">final</span> <span class="nc">Call</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">call</span><span class="o">,</span> <span class="kd">final</span> <span class="nc">Response</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">isCallSuccess</span><span class="o">(</span><span class="n">response</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">handleSuccessResponse</span><span class="o">(</span><span class="n">call</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">callback</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">handleErrorResponse</span><span class="o">(</span><span class="n">call</span><span class="o">,</span> <span class="k">new</span> <span class="nc">IOException</span><span class="o">(</span><span class="s">"Call failed!"</span><span class="o">),</span> <span class="n">callback</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onFailure</span><span class="o">(</span><span class="kd">final</span> <span class="nc">Call</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">call</span><span class="o">,</span> <span class="kd">final</span> <span class="nc">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">handleErrorResponse</span><span class="o">(</span><span class="n">call</span><span class="o">,</span> <span class="n">t</span><span class="o">,</span> <span class="n">callback</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>

    <span class="nd">@WorkerThread</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleErrorResponse</span><span class="o">(</span><span class="kd">final</span> <span class="nc">Call</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">call</span><span class="o">,</span> <span class="kd">final</span> <span class="nc">Throwable</span> <span class="n">t</span><span class="o">,</span> <span class="kd">final</span> <span class="nc">Callback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">executor</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">call</span> <span class="o">||</span> <span class="n">call</span><span class="o">.</span><span class="na">isCanceled</span><span class="o">())</span> <span class="o">{</span>
                    <span class="k">return</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="n">callback</span><span class="o">.</span><span class="na">onFailure</span><span class="o">(</span><span class="n">call</span><span class="o">,</span> <span class="n">t</span><span class="o">);</span>
                <span class="n">notifyCallFinished</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>

    <span class="nd">@WorkerThread</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleSuccessResponse</span><span class="o">(</span><span class="kd">final</span> <span class="nc">Call</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">call</span><span class="o">,</span> <span class="kd">final</span> <span class="nc">Response</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">response</span><span class="o">,</span> <span class="kd">final</span> <span class="nc">Callback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">executor</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">call</span> <span class="o">||</span> <span class="n">call</span><span class="o">.</span><span class="na">isCanceled</span><span class="o">())</span> <span class="o">{</span>
                    <span class="k">return</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="n">callback</span><span class="o">.</span><span class="na">onResponse</span><span class="o">(</span><span class="n">call</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
                <span class="n">notifyCallFinished</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isExecuted</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">call</span><span class="o">.</span><span class="na">isExecuted</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cancel</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">call</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isCanceled</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">call</span><span class="o">.</span><span class="na">isCanceled</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">RetrofitCall</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">clone</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">RetrofitCall</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">clone</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RetrofitCall</span><span class="o">&lt;&gt;(</span><span class="n">call</span><span class="o">.</span><span class="na">clone</span><span class="o">(),</span> <span class="n">executor</span><span class="o">);</span>
        <span class="n">clone</span><span class="o">.</span><span class="na">setRequestTag</span><span class="o">(</span><span class="n">requestTag</span><span class="o">);</span>
        <span class="n">clone</span><span class="o">.</span><span class="na">setLogTag</span><span class="o">(</span><span class="n">logTag</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">clone</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Request</span> <span class="nf">request</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">call</span><span class="o">.</span><span class="na">request</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isCallSuccess</span><span class="o">(</span><span class="nc">Response</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">httpStatusCode</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">code</span><span class="o">();</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">httpStatusCode</span> <span class="o">&gt;=</span> <span class="nc">HttpURLConnection</span><span class="o">.</span><span class="na">HTTP_OK</span> <span class="o">&amp;&amp;</span> <span class="n">httpStatusCode</span> <span class="o">&lt;</span> <span class="nc">HttpURLConnection</span><span class="o">.</span><span class="na">HTTP_BAD_REQUEST</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>As you can see, I implement Call interface. It has two constructors, Call<T> and Executor. Call<T> is the original Retrofit Call object, we just wrap it into this new class. Executor is to send requests in specific thread. There is a pitfall that you have to modify code in order to send response back to UI thread. By default, Retrofit executes custom calls on background thread when you override your custom calls. So I throw the response in executor to let it send back to UI thread.</T></T></p>

<p>After we finished the custom call, we can start writing call adapter.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RetrofitCallAdapter</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="nc">CallAdapter</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="nc">RetrofitCall</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;&gt;</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Type</span> <span class="n">responseType</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Executor</span> <span class="n">executor</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">RetrofitCallAdapter</span><span class="o">(</span><span class="nc">Type</span> <span class="n">responseType</span><span class="o">,</span> <span class="nc">Executor</span> <span class="n">executor</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">responseType</span> <span class="o">=</span> <span class="n">responseType</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">executor</span> <span class="o">=</span> <span class="n">executor</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Type</span> <span class="nf">responseType</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">responseType</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">RetrofitCall</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">adapt</span><span class="o">(</span><span class="nc">Call</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">call</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">RetrofitCall</span><span class="o">&lt;&gt;(</span><span class="n">call</span><span class="o">,</span> <span class="n">executor</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Basically, it just make new custom calls for the call adapter factory to let Retrofit use them.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RetrofitCallAdapterFactory</span> <span class="kd">extends</span> <span class="nc">CallAdapter</span><span class="o">.</span><span class="na">Factory</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">RetrofitCallAdapterFactory</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Executor</span> <span class="n">executor</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MainThreadExecutor</span><span class="o">();</span>

    <span class="kd">private</span> <span class="nf">RetrofitCallAdapterFactory</span><span class="o">()</span> <span class="o">{</span>

    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="nc">RetrofitCallAdapterFactory</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">EtRetrofitCallAdapterFactory</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">CallAdapter</span><span class="o">&lt;?,</span> <span class="o">?&gt;</span> <span class="n">get</span><span class="o">(</span><span class="nc">Type</span> <span class="n">returnType</span><span class="o">,</span> <span class="nc">Annotation</span><span class="o">[]</span> <span class="n">annotations</span><span class="o">,</span> <span class="nc">Retrofit</span> <span class="n">retrofit</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">rawType</span> <span class="o">=</span> <span class="n">getRawType</span><span class="o">(</span><span class="n">returnType</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">rawType</span> <span class="o">==</span> <span class="nc">RetrofitCall</span><span class="o">.</span><span class="na">class</span> <span class="o">&amp;&amp;</span> <span class="n">returnType</span> <span class="k">instanceof</span> <span class="nc">ParameterizedType</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Type</span> <span class="n">callReturnType</span> <span class="o">=</span> <span class="n">getParameterUpperBound</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="o">(</span><span class="nc">ParameterizedType</span><span class="o">)</span> <span class="n">returnType</span><span class="o">);</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">RetrofitCallAdapter</span><span class="o">(</span><span class="n">callReturnType</span><span class="o">,</span> <span class="n">executor</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>In call adapter factory, I create a main thread executor in order to send response back to UI thread.</p>

<h2 id="retrying-requests">Retrying Requests</h2>
<p>Retrofit does not retry calls itself, so we have to write by ourselves. In this example, I set retry limit to 2, and give it a retry count as 0. When it retrys 3 times, it stops retrying. There is a important thing we need to</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">int</span> <span class="n">retryLimit</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
<span class="kd">private</span> <span class="kt">int</span> <span class="n">retryCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

<span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">enqueue</span><span class="o">(</span><span class="kd">final</span> <span class="nc">Callback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">call</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="k">new</span> <span class="nc">Callback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onResponse</span><span class="o">(</span><span class="kd">final</span> <span class="nc">Call</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">call</span><span class="o">,</span> <span class="kd">final</span> <span class="nc">Response</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">isCallSuccess</span><span class="o">(</span><span class="n">response</span><span class="o">)</span> <span class="o">||</span> <span class="n">retryCount</span> <span class="o">&gt;=</span> <span class="n">retryLimit</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">handleSuccessResponse</span><span class="o">(</span><span class="n">call</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">callback</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">handleErrorResponse</span><span class="o">(</span><span class="n">call</span><span class="o">,</span> <span class="k">new</span> <span class="nc">IOException</span><span class="o">(</span><span class="s">"Call failed!"</span><span class="o">),</span> <span class="n">callback</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onFailure</span><span class="o">(</span><span class="kd">final</span> <span class="nc">Call</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">call</span><span class="o">,</span> <span class="kd">final</span> <span class="nc">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">isCanceled</span><span class="o">())</span> <span class="o">{</span>
                <span class="c1">// Do nothing.</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">retryCount</span> <span class="o">&gt;=</span> <span class="n">retryLimit</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">handleErrorResponse</span><span class="o">(</span><span class="n">call</span><span class="o">,</span> <span class="n">t</span><span class="o">,</span> <span class="n">callback</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">retryCount</span><span class="o">++;</span>
                <span class="n">retry</span><span class="o">(</span><span class="n">callback</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">});</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="kt">void</span> <span class="nf">retry</span><span class="o">(</span><span class="kd">final</span> <span class="nc">Callback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">call</span> <span class="o">=</span> <span class="n">call</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
    <span class="n">enqueue</span><span class="o">(</span><span class="n">callback</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<h2 id="fire-and-forget-cases">Fire-and-Forget Cases</h2>
<p>Sometimes, we send reqeusts, but we donâ€™t care what is the responses. Acutally, it quite simple. We just override Callback, and put it into enqueue method in Retrofit.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmptyRetrofitCallback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="nc">Callback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onResponse</span><span class="o">(</span><span class="nc">Call</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">call</span><span class="o">,</span> <span class="nc">Response</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onFailure</span><span class="o">(</span><span class="nc">Call</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">call</span><span class="o">,</span> <span class="nc">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h2 id="managing-requests">Managing Requests</h2>
<p>By default, Retrofit donâ€™t have a class to let you manage requests, you have to manage yourself. It gave us a good extensibility to implement a class to provide features like cancelling all requests, cancelling requests by tags, and so on.</p>

<p>First, I implement a composite class, named CompositeCall, to manage requests. In this class, it has a list to save current running calls. When a call is executed or cancelled, it will be removed from the list automatically. I also create an interface to let this class listen to individual class. So it would know when to add or remove calls.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CompositeCall</span> <span class="kd">implements</span> <span class="nc">RetrofitCall</span><span class="o">.</span><span class="na">CallListener</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">TAG</span> <span class="o">=</span> <span class="s">"CompositeCall"</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">RetrofitCall</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cancel</span><span class="o">(</span><span class="nc">String</span> <span class="n">requestTag</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">RetrofitCall</span><span class="o">&gt;</span> <span class="n">iterator</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">RetrofitCall</span> <span class="n">call</span> <span class="o">=</span> <span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">call</span><span class="o">.</span><span class="na">getRequestTag</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">requestTag</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">call</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
                <span class="nc">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="no">TAG</span><span class="o">,</span> <span class="s">"cancel: The call with tag "</span> <span class="o">+</span> <span class="n">requestTag</span> <span class="o">+</span> <span class="s">" was cancelled."</span><span class="o">);</span>
                <span class="n">iterator</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cancelAll</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">RetrofitCall</span> <span class="n">call</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">call</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="n">list</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isRunning</span><span class="o">(</span><span class="nc">String</span> <span class="n">requestTag</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">TextUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">requestTag</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="kt">boolean</span> <span class="n">isRunning</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">RetrofitCall</span> <span class="nl">call:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">requestTag</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">call</span><span class="o">.</span><span class="na">getRequestTag</span><span class="o">()))</span> <span class="o">{</span>
                <span class="n">isRunning</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">isRunning</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onFinished</span><span class="o">(</span><span class="nc">RetrofitCall</span> <span class="n">call</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">call</span><span class="o">.</span><span class="na">detach</span><span class="o">();</span>
        <span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">call</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAdded</span><span class="o">(</span><span class="nc">RetrofitCall</span> <span class="n">call</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">call</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>I add the code below in RetrofitCall to work with CompositeCall.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="nc">String</span> <span class="n">requestTag</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
<span class="kd">private</span> <span class="nc">CallListener</span> <span class="n">callListener</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CallListener</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">onFinished</span><span class="o">(</span><span class="nc">RetrofitCall</span> <span class="n">call</span><span class="o">);</span>

    <span class="kt">void</span> <span class="nf">onAdded</span><span class="o">(</span><span class="nc">RetrofitCall</span> <span class="n">call</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">RetrofitCall</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">setRequestTag</span><span class="o">(</span><span class="nc">String</span> <span class="n">requestTag</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">requestTag</span> <span class="o">=</span> <span class="n">requestTag</span><span class="o">;</span>
    <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">RetrofitCall</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">attachTo</span><span class="o">(</span><span class="nc">CallListener</span> <span class="n">listener</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">callListener</span> <span class="o">=</span> <span class="n">listener</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">callListener</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="n">callListener</span><span class="o">.</span><span class="na">onAdded</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kt">void</span> <span class="nf">detach</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">callListener</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="kt">void</span> <span class="nf">notifyCallFinished</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">callListener</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">callListener</span><span class="o">.</span><span class="na">onFinished</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Finally, we can use CompositeCall to manage requests like thisâ€¦</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Activity onCreate()</span>
<span class="n">compositeCall</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CompositeCall</span><span class="o">();</span>

<span class="c1">// Send reqeust</span>
<span class="n">api</span><span class="o">.</span><span class="na">getItem</span><span class="o">(</span><span class="n">appData</span><span class="o">.</span><span class="na">getApi</span><span class="o">())</span>
                <span class="o">.</span><span class="na">setLogTag</span><span class="o">(</span><span class="n">tag</span><span class="o">)</span>
                <span class="o">.</span><span class="na">setRequestTag</span><span class="o">(</span><span class="n">tag</span><span class="o">)</span>
                <span class="o">.</span><span class="na">attachTo</span><span class="o">(</span><span class="n">compositeCalls</span><span class="o">)</span>
                <span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="k">new</span> <span class="nc">Callback</span><span class="o">(){</span>
                    <span class="c1">// skip...</span>
                <span class="o">});</span>
                
<span class="c1">// Activity onDestroy()</span>
<span class="n">compositeCall</span><span class="o">.</span><span class="na">cancelAll</span><span class="o">();</span>

<span class="c1">// Or cancel by reqeust tag</span>
<span class="n">compositeCall</span><span class="o">.</span><span class="na">cancel</span><span class="o">(</span><span class="n">tag</span><span class="o">);</span>
</code></pre></div></div>

<p>Itâ€™s very important to release or canel callbacks in the end of lifecycle! Donâ€™t forget to cancel requests in onDetroy() or onStop() to avoid memory leak!</p>

<h2 id="unit-testing">Unit Testing</h2>
<p>I mentioned that Retrofit has good testability. If we override calls and adapters, how could we test them? Donâ€™t worry, itâ€™s not that hard to write unit tests against them! All of the calls are from Retrofit call, so we can write a fake call in unit test. Here is the test calls I write for RetrofitCall. I write this class by referencing <a href="https://github.com/square/retrofit/blob/master/retrofit-mock/src/main/java/retrofit2/mock/Calls.java">retrofit-mock</a>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RetrofitTestCalls</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">RetrofitCall</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">response</span><span class="o">(</span><span class="no">T</span> <span class="n">successValue</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">FakeCall</span><span class="o">&lt;&gt;(</span><span class="nc">Response</span><span class="o">.</span><span class="na">success</span><span class="o">(</span><span class="n">successValue</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">RetrofitCall</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">response</span><span class="o">(</span><span class="nc">Response</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">FakeCall</span><span class="o">&lt;&gt;(</span><span class="n">response</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">RetrofitCall</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">failure</span><span class="o">(</span><span class="nc">IOException</span> <span class="n">failure</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">FakeCall</span><span class="o">&lt;&gt;(</span><span class="n">failure</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">FakeCall</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="nc">RetrofitCall</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Response</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">response</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="nc">IOException</span> <span class="n">error</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="nc">AtomicBoolean</span> <span class="n">canceled</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AtomicBoolean</span><span class="o">();</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="nc">AtomicBoolean</span> <span class="n">executed</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AtomicBoolean</span><span class="o">();</span>

        <span class="nc">FakeCall</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="nc">Response</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>

            <span class="k">this</span><span class="o">.</span><span class="na">response</span> <span class="o">=</span> <span class="n">response</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">error</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nc">FakeCall</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="nc">IOException</span> <span class="n">error</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
            <span class="k">this</span><span class="o">.</span><span class="na">response</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">error</span> <span class="o">=</span> <span class="n">error</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">Response</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">execute</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">executed</span><span class="o">.</span><span class="na">compareAndSet</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"Already executed"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">canceled</span><span class="o">.</span><span class="na">get</span><span class="o">())</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"canceled"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">response</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">throw</span> <span class="n">error</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"ConstantConditions"</span><span class="o">)</span> <span class="c1">// Guarding public API nullability.</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">enqueue</span><span class="o">(</span><span class="nc">Callback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">callback</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">(</span><span class="s">"callback == null"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">executed</span><span class="o">.</span><span class="na">compareAndSet</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"Already executed"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">canceled</span><span class="o">.</span><span class="na">get</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">callback</span><span class="o">.</span><span class="na">onFailure</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="k">new</span> <span class="nc">IOException</span><span class="o">(</span><span class="s">"canceled"</span><span class="o">));</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">response</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">callback</span><span class="o">.</span><span class="na">onResponse</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">callback</span><span class="o">.</span><span class="na">onFailure</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">error</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isExecuted</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">executed</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cancel</span><span class="o">()</span> <span class="o">{</span>
            <span class="n">canceled</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isCanceled</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">canceled</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">RetrofitCall</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">clone</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">response</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nc">FakeCall</span><span class="o">&lt;&gt;(</span><span class="n">error</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nc">FakeCall</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;(</span><span class="n">response</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">Request</span> <span class="nf">request</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">response</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">raw</span><span class="o">().</span><span class="na">request</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nc">Request</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">url</span><span class="o">(</span><span class="s">"http://localhost"</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Then, we can use them in tests. This mock class also gives us two advantages. First, we donâ€™t actually need to send request to real server and tests shall be much faster. Second, we can decide what to response in mock calls.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RunWith</span><span class="o">(</span><span class="nc">PowerMockRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyPresenterImplTest</span> <span class="o">{</span>
    <span class="nd">@Mock</span>
    <span class="kd">private</span> <span class="nc">IMyView</span> <span class="n">mockView</span><span class="o">;</span>
    <span class="nd">@Mock</span>
    <span class="kd">private</span> <span class="nc">IRetrofitApi</span> <span class="n">mockApi</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">MyPresenterImpl</span> <span class="n">presenter</span><span class="o">;</span>

    <span class="nd">@Before</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">presenter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyPresenterImpl</span><span class="o">(</span><span class="n">mockView</span><span class="o">,</span> <span class="n">mockApi</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getList</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="nc">MyResponseModel</span> <span class="n">response</span> <span class="o">=</span> <span class="nc">TestModelUtil</span><span class="o">.</span><span class="na">getResponse</span><span class="o">();</span>
        <span class="nc">RetrofitCall</span><span class="o">&lt;</span><span class="nc">MyResponseModel</span><span class="o">&gt;</span> <span class="n">mockCall</span> <span class="o">=</span> <span class="n">getMockCall</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
        <span class="n">presenter</span><span class="o">.</span><span class="na">getList</span><span class="o">();</span>
        <span class="n">verify</span><span class="o">(</span><span class="n">mockView</span><span class="o">).</span><span class="na">setListRefreshing</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="n">assertTrue</span><span class="o">(</span><span class="n">mockCall</span><span class="o">.</span><span class="na">isExecuted</span><span class="o">());</span>
        <span class="nc">ArgumentCaptor</span><span class="o">&lt;</span><span class="nc">ArrayList</span><span class="o">&gt;</span> <span class="n">listArgumentCaptor</span> <span class="o">=</span> <span class="nc">ArgumentCaptor</span><span class="o">.</span><span class="na">forClass</span><span class="o">(</span><span class="nc">ArrayList</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">mockView</span><span class="o">.</span><span class="na">onListLoaded</span><span class="o">(</span><span class="n">listArgumentCaptor</span><span class="o">.</span><span class="na">capture</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">RetrofitCall</span><span class="o">&lt;</span><span class="nc">MyResponseModel</span><span class="o">&gt;</span> <span class="nf">getMockCall</span><span class="o">(</span><span class="nc">MyResponseModel</span> <span class="n">resp</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">RetrofitCall</span><span class="o">&lt;</span><span class="nc">MyResponseModel</span><span class="o">&gt;</span> <span class="n">mockCall</span> <span class="o">=</span> <span class="nc">RetrofitTestCalls</span><span class="o">.</span><span class="na">response</span><span class="o">(</span><span class="nc">Response</span><span class="o">.</span><span class="na">success</span><span class="o">(</span><span class="n">resp</span><span class="o">));</span>
        <span class="n">when</span><span class="o">(</span><span class="n">mockApi</span><span class="o">.</span><span class="na">getList</span><span class="o">((</span><span class="nc">String</span><span class="o">)</span> <span class="n">anyObject</span><span class="o">())).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">mockCall</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">mockCall</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h2 id="summary">Summary</h2>
<p>Using Retrofit makes android development faster and better. It also makes code more concise and easier to read. Custom calls and composite calls can help us get rid off memory leaks if we use them properly. However, in my personal opinion, I recommend using <a href="https://github.com/ReactiveX/RxJava">RxJava</a> with Retrofit and lamdba expression to avoid callback hell and gain more manipulations on program data flow.</p>

:ET